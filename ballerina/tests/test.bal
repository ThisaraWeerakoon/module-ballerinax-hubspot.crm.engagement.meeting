// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/test;
import ballerina/oauth2;
import ballerina/http;

configurable string clientId = ?;
configurable string clientSecret = ?;
configurable string refreshToken = ?;
configurable string serviceUrl = ?;

OAuth2RefreshTokenGrantConfig auth = {
       clientId,
       clientSecret,
       refreshToken,
       credentialBearer: oauth2:POST_BODY_BEARER
};

ConnectionConfig config = {auth:auth};
final Client hubspot = check new Client(config, serviceUrl);
#keep the meeting id as reference for other tests after creation
string meetingId = "";


// configurable http:BearerTokenConfig & readonly authConfig = ?;
// ConnectionConfig config = {auth : authConfig};
// Client baseClient = check new Client(config, serviceUrl = "https://api.hubapi.com");

@test:Config {
    dependsOn: [testUpdateMeeting]
}
function  testArchiveMeeting() {
    http:Response|error response = hubspot ->/crm/v3/objects/meetings/[meetingId].delete();
     if
        response is http:Response {
            test:assertTrue(response.statusCode == 204);
    } else {
        test:assertFail("Failed to delete meeting");
    }

};

@test:Config {
    dependsOn: [testgetMeetingById]
}
function  testUpdateMeeting() {
    SimplePublicObjectInput payload = {
        "properties": {
            "hs_meeting_title": "test meeting changed"
        }
    };
    SimplePublicObject|error updatedOutput = hubspot ->/crm/v3/objects/meetings/[meetingId].patch(payload);
    if updatedOutput is SimplePublicObject {
        test:assertTrue(updatedOutput.updatedAt !is "");
        test:assertEquals(updatedOutput.properties["hs_meeting_title"], "test meeting changed");
    } else {
        test:assertFail("Failed to update meeting");
    }


}

@test:Config {
    dependsOn: [testCreateMeeting]
}
function  testgetMeetingById() {
    SimplePublicObjectWithAssociations|error meeting = hubspot ->/crm/v3/objects/meetings/[meetingId]();
    if meeting is SimplePublicObjectWithAssociations {
       
        test:assertTrue(meeting.id == meetingId);
    } else {
        test:assertFail("Failed to get meeting");
    }
}

// @test:Config {}
// isolated function  testPost-/crm/v3/objects/meetings/batch/update_update() {
// }

// @test:Config {}
// isolated function  testPost-/crm/v3/objects/meetings/batch/read_read() {
// }

// @test:Config {}
// isolated function  testPost-/crm/v3/objects/meetings/batch/archive_archive() {
// }

@test:Config
function  testCreateMeeting() {
    SimplePublicObjectInputForCreate payload = {
        "properties": {
            "hs_timestamp": "2021-03-23T01:02:44.872Z",
            "hs_meeting_title": "test meeting"
        },
        "associations": []
    };
    
    SimplePublicObject|error output = hubspot ->/crm/v3/objects/meetings.post(payload = payload);

    if output is SimplePublicObject {
        meetingId = output.id;
        test:assertTrue(output.createdAt !is "");
    } else {
        test:assertFail("Failed to create meeting");
    }



};

@test:Config {
    dependsOn: [testCreateMeeting]
}
function  testgetAllMeetings() {
    CollectionResponseSimplePublicObjectWithAssociationsForwardPaging|error meetings = hubspot -> /crm/v3/objects/meetings;
 
    if meetings is CollectionResponseSimplePublicObjectWithAssociationsForwardPaging {
        test:assertTrue(meetings.results.length() > 0);
    } else {
        test:assertFail("Failed to get meetings");
    }
};

// @test:Config {}
// isolated function  testPost-/crm/v3/objects/meetings/batch/upsert_upsert() {
// }

// @test:Config {}
// isolated function  testPost-/crm/v3/objects/meetings/batch/create_create() {
// }

@test:Config {
    dependsOn: [testgetAllMeetings]
}
function  testSearchMeetings() {
    PublicObjectSearchRequest query = {
        query: "test"

    };
    CollectionResponseWithTotalSimplePublicObjectForwardPaging|error searchResult = hubspot ->/crm/v3/objects/meetings/search.post(payload = query);
    if searchResult is CollectionResponseWithTotalSimplePublicObjectForwardPaging {
        test:assertTrue(searchResult.results.length() > 0);
    } else {
        test:assertFail("Failed to search meeting");
    }
}





