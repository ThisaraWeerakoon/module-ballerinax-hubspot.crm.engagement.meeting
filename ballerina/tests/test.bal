// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/test;
import ballerina/oauth2;
import ballerina/http;

configurable string clientId = ?;
configurable string clientSecret = ?;
configurable string refreshToken = ?;
configurable string serviceUrl = ?;

OAuth2RefreshTokenGrantConfig auth = {
       clientId,
       clientSecret,
       refreshToken,
       credentialBearer: oauth2:POST_BODY_BEARER
};

ConnectionConfig config = {auth:auth};
final Client hubspot = check new Client(config, serviceUrl);
#keep the meeting id as reference for other tests after creation
string meetingId = "";

#keep the meeting batch id as reference for other tests after creation
string meetingBatchId = "";

@test:Config {
    dependsOn: [testUpdateMeeting]
}
function  testArchiveMeeting() {
    http:Response|error response = hubspot ->/[meetingId].delete();
     if
        response is http:Response {
            test:assertTrue(response.statusCode == 204);
    } else {
        test:assertFail("Failed to delete meeting");
    }

};

@test:Config {
    dependsOn: [testgetMeetingById]
}
function  testUpdateMeeting() {
    SimplePublicObjectInput payload = {
        "properties": {
            "hs_meeting_title": "test meeting changed"
        }
    };
    SimplePublicObject|error updatedOutput = hubspot ->/[meetingId].patch(payload);
    if updatedOutput is SimplePublicObject {
        test:assertTrue(updatedOutput.updatedAt !is "");
        test:assertEquals(updatedOutput.properties["hs_meeting_title"], "test meeting changed");
    } else {
        test:assertFail("Failed to update meeting");
    }


}

@test:Config {
    dependsOn: [testCreateMeeting]
}
function  testgetMeetingById() {
    SimplePublicObjectWithAssociations|error meeting = hubspot ->/[meetingId]();
    if meeting is SimplePublicObjectWithAssociations {
       
        test:assertTrue(meeting.id == meetingId);
    } else {
        test:assertFail("Failed to get meeting");
    }
}

@test:Config {
    dependsOn: [testgetBatchById]
}
function  testUpdateBatch() {
    BatchInputSimplePublicObjectBatchInput payload = {
    "inputs": [
        {
        "id":meetingBatchId,
        "properties":{}    
        }                    
    ]
};

    BatchResponseSimplePublicObject|BatchResponseSimplePublicObjectWithErrors|error response = hubspot ->/batch/update.post(payload);

    if response is BatchResponseSimplePublicObject{
        test:assertTrue(response.status is "COMPLETE");
    }else {
        test:assertFail("Failed to update batch of meetings");
    }

}

@test:Config {
    dependsOn: [testCreateBatch]
}
function  testgetBatchById() {
    BatchReadInputSimplePublicObjectId payload = 
        {
  "propertiesWithHistory": [],
  "inputs": [
    {
      "id": meetingBatchId
    }
  ],
  "properties": []
};
    
    BatchResponseSimplePublicObject|BatchResponseSimplePublicObjectWithErrors|error response = hubspot ->/batch/read.post(payload);
    if response is BatchResponseSimplePublicObject{
        test:assertTrue(response.results.length()>=0);
    }
    else {
        test:assertFail("Failed to get meeting batch");
    }
}

@test:Config {
    dependsOn: [testgetBatchById]
}
function  testArchiveBatch() {

    BatchInputSimplePublicObjectId payload = {
  "inputs": [
    {
      "id": meetingBatchId
    }
  ]
};
    http:Response|error response = hubspot ->/batch/archive.post(payload);
     if response is http:Response {
            test:assertTrue(response.statusCode == 204);
    } else {
        test:assertFail("Failed to delete batch");
    }


}

@test:Config
function  testCreateMeeting() {
    SimplePublicObjectInputForCreate payload = {
        "properties": {
            "hs_timestamp": "2021-03-23T01:02:44.872Z",
            "hs_meeting_title": "test meeting"
        },
        "associations": []
    };
    
    SimplePublicObject|error output = hubspot ->/.post(payload = payload);

    if output is SimplePublicObject {
        meetingId = output.id;
        test:assertTrue(output.createdAt !is "");
    } else {
        test:assertFail("Failed to create meeting");
    }



};

@test:Config {
    dependsOn: [testCreateMeeting]
}
function  testgetAllMeetings() {
    CollectionResponseSimplePublicObjectWithAssociationsForwardPaging|error meetings = hubspot -> /;
 
    if meetings is CollectionResponseSimplePublicObjectWithAssociationsForwardPaging {
        test:assertTrue(meetings.results.length() > 0);
    } else {
        test:assertFail("Failed to get meetings");
    }
};



@test:Config
function testCreateBatch() {
    BatchInputSimplePublicObjectInputForCreate payload = {
        "inputs": [
            {
                "properties": {},
                "associations": []
            }
        ]
    };

    BatchResponseSimplePublicObject|BatchResponseSimplePublicObjectWithErrors|error response = hubspot ->/batch/create.post(payload);

    if response is BatchResponseSimplePublicObject{
        meetingBatchId = response.results[0].id;
        test:assertTrue(response.status is "COMPLETE");
    }else {
        test:assertFail("Failed to create batch of meetings");
    }

}

@test:Config {
    dependsOn: [testgetAllMeetings]
}
function  testSearchMeetings() {
    PublicObjectSearchRequest query = {
        query: "test"

    };
    CollectionResponseWithTotalSimplePublicObjectForwardPaging|error searchResult = hubspot ->/search.post(payload = query);
    if searchResult is CollectionResponseWithTotalSimplePublicObjectForwardPaging {
        test:assertTrue(searchResult.results.length() > 0);
    } else {
        test:assertFail("Failed to search meeting");
    }
}





